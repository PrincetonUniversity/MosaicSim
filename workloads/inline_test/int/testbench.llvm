; ModuleID = 'testbench.cc'
source_filename = "testbench.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@_ZSt4cout = external dso_local global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_testbench.cc, i8* null }]

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #3
  ret void
}

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define dso_local i32 @_Z6helperiPi(i32 %myint, i32* nocapture %a) local_unnamed_addr #4 {
entry:
  %.pre = load i32, i32* %a, align 4, !tbaa !2
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %arrayidx3 = getelementptr inbounds i32, i32* %a, i64 99
  %0 = load i32, i32* %arrayidx3, align 4, !tbaa !2
  ret i32 %0

for.body:                                         ; preds = %for.body, %entry
  %1 = phi i32 [ %.pre, %entry ], [ %mul.2, %for.body ]
  %indvars.iv = phi i64 [ 1, %entry ], [ %indvars.iv.next.2, %for.body ]
  %mul = shl nsw i32 %1, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  store i32 %mul, i32* %arrayidx2, align 4, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %mul.1 = shl i32 %1, 2
  %arrayidx2.1 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv.next
  store i32 %mul.1, i32* %arrayidx2.1, align 4, !tbaa !2
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %mul.2 = shl i32 %1, 3
  %arrayidx2.2 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv.next.1
  store i32 %mul.2, i32* %arrayidx2.2, align 4, !tbaa !2
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 100
  br i1 %exitcond.2, label %for.cond.cleanup, label %for.body
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #5

; Function Attrs: noinline norecurse nounwind uwtable
define dso_local i32 @_Z8randfunciPi(i32 %myint, i32* nocapture %a) local_unnamed_addr #4 {
entry:
  %.pre = load i32, i32* %a, align 4, !tbaa !2
  %arrayidx2 = getelementptr inbounds i32, i32* %a, i64 1
  store i32 %.pre, i32* %arrayidx2, align 4, !tbaa !2
  %arrayidx2.1 = getelementptr inbounds i32, i32* %a, i64 2
  store i32 %.pre, i32* %arrayidx2.1, align 4, !tbaa !2
  %arrayidx2.2 = getelementptr inbounds i32, i32* %a, i64 3
  store i32 %.pre, i32* %arrayidx2.2, align 4, !tbaa !2
  %arrayidx2.3 = getelementptr inbounds i32, i32* %a, i64 4
  store i32 %.pre, i32* %arrayidx2.3, align 4, !tbaa !2
  %arrayidx2.4 = getelementptr inbounds i32, i32* %a, i64 5
  store i32 %.pre, i32* %arrayidx2.4, align 4, !tbaa !2
  %arrayidx2.5 = getelementptr inbounds i32, i32* %a, i64 6
  store i32 %.pre, i32* %arrayidx2.5, align 4, !tbaa !2
  %arrayidx2.6 = getelementptr inbounds i32, i32* %a, i64 7
  store i32 %.pre, i32* %arrayidx2.6, align 4, !tbaa !2
  %arrayidx2.7 = getelementptr inbounds i32, i32* %a, i64 8
  store i32 %.pre, i32* %arrayidx2.7, align 4, !tbaa !2
  %arrayidx2.8 = getelementptr inbounds i32, i32* %a, i64 9
  store i32 %.pre, i32* %arrayidx2.8, align 4, !tbaa !2
  %arrayidx2.9 = getelementptr inbounds i32, i32* %a, i64 10
  store i32 %.pre, i32* %arrayidx2.9, align 4, !tbaa !2
  %arrayidx2.10 = getelementptr inbounds i32, i32* %a, i64 11
  store i32 %.pre, i32* %arrayidx2.10, align 4, !tbaa !2
  %arrayidx2.11 = getelementptr inbounds i32, i32* %a, i64 12
  store i32 %.pre, i32* %arrayidx2.11, align 4, !tbaa !2
  %arrayidx2.12 = getelementptr inbounds i32, i32* %a, i64 13
  store i32 %.pre, i32* %arrayidx2.12, align 4, !tbaa !2
  %arrayidx2.13 = getelementptr inbounds i32, i32* %a, i64 14
  store i32 %.pre, i32* %arrayidx2.13, align 4, !tbaa !2
  %arrayidx2.14 = getelementptr inbounds i32, i32* %a, i64 15
  store i32 %.pre, i32* %arrayidx2.14, align 4, !tbaa !2
  %arrayidx2.15 = getelementptr inbounds i32, i32* %a, i64 16
  store i32 %.pre, i32* %arrayidx2.15, align 4, !tbaa !2
  %arrayidx2.16 = getelementptr inbounds i32, i32* %a, i64 17
  store i32 %.pre, i32* %arrayidx2.16, align 4, !tbaa !2
  %arrayidx2.17 = getelementptr inbounds i32, i32* %a, i64 18
  store i32 %.pre, i32* %arrayidx2.17, align 4, !tbaa !2
  %arrayidx2.18 = getelementptr inbounds i32, i32* %a, i64 19
  store i32 %.pre, i32* %arrayidx2.18, align 4, !tbaa !2
  %arrayidx2.19 = getelementptr inbounds i32, i32* %a, i64 20
  store i32 %.pre, i32* %arrayidx2.19, align 4, !tbaa !2
  %arrayidx2.20 = getelementptr inbounds i32, i32* %a, i64 21
  store i32 %.pre, i32* %arrayidx2.20, align 4, !tbaa !2
  %arrayidx2.21 = getelementptr inbounds i32, i32* %a, i64 22
  store i32 %.pre, i32* %arrayidx2.21, align 4, !tbaa !2
  %arrayidx2.22 = getelementptr inbounds i32, i32* %a, i64 23
  store i32 %.pre, i32* %arrayidx2.22, align 4, !tbaa !2
  %arrayidx2.23 = getelementptr inbounds i32, i32* %a, i64 24
  store i32 %.pre, i32* %arrayidx2.23, align 4, !tbaa !2
  %arrayidx2.24 = getelementptr inbounds i32, i32* %a, i64 25
  store i32 %.pre, i32* %arrayidx2.24, align 4, !tbaa !2
  %arrayidx2.25 = getelementptr inbounds i32, i32* %a, i64 26
  store i32 %.pre, i32* %arrayidx2.25, align 4, !tbaa !2
  %arrayidx2.26 = getelementptr inbounds i32, i32* %a, i64 27
  store i32 %.pre, i32* %arrayidx2.26, align 4, !tbaa !2
  %arrayidx2.27 = getelementptr inbounds i32, i32* %a, i64 28
  store i32 %.pre, i32* %arrayidx2.27, align 4, !tbaa !2
  %arrayidx2.28 = getelementptr inbounds i32, i32* %a, i64 29
  store i32 %.pre, i32* %arrayidx2.28, align 4, !tbaa !2
  %arrayidx2.29 = getelementptr inbounds i32, i32* %a, i64 30
  store i32 %.pre, i32* %arrayidx2.29, align 4, !tbaa !2
  %arrayidx2.30 = getelementptr inbounds i32, i32* %a, i64 31
  store i32 %.pre, i32* %arrayidx2.30, align 4, !tbaa !2
  %arrayidx2.31 = getelementptr inbounds i32, i32* %a, i64 32
  store i32 %.pre, i32* %arrayidx2.31, align 4, !tbaa !2
  %arrayidx2.32 = getelementptr inbounds i32, i32* %a, i64 33
  store i32 %.pre, i32* %arrayidx2.32, align 4, !tbaa !2
  %arrayidx2.33 = getelementptr inbounds i32, i32* %a, i64 34
  store i32 %.pre, i32* %arrayidx2.33, align 4, !tbaa !2
  %arrayidx2.34 = getelementptr inbounds i32, i32* %a, i64 35
  store i32 %.pre, i32* %arrayidx2.34, align 4, !tbaa !2
  %arrayidx2.35 = getelementptr inbounds i32, i32* %a, i64 36
  store i32 %.pre, i32* %arrayidx2.35, align 4, !tbaa !2
  %arrayidx2.36 = getelementptr inbounds i32, i32* %a, i64 37
  store i32 %.pre, i32* %arrayidx2.36, align 4, !tbaa !2
  %arrayidx2.37 = getelementptr inbounds i32, i32* %a, i64 38
  store i32 %.pre, i32* %arrayidx2.37, align 4, !tbaa !2
  %arrayidx2.38 = getelementptr inbounds i32, i32* %a, i64 39
  store i32 %.pre, i32* %arrayidx2.38, align 4, !tbaa !2
  %arrayidx2.39 = getelementptr inbounds i32, i32* %a, i64 40
  store i32 %.pre, i32* %arrayidx2.39, align 4, !tbaa !2
  %arrayidx2.40 = getelementptr inbounds i32, i32* %a, i64 41
  store i32 %.pre, i32* %arrayidx2.40, align 4, !tbaa !2
  %arrayidx2.41 = getelementptr inbounds i32, i32* %a, i64 42
  store i32 %.pre, i32* %arrayidx2.41, align 4, !tbaa !2
  %arrayidx2.42 = getelementptr inbounds i32, i32* %a, i64 43
  store i32 %.pre, i32* %arrayidx2.42, align 4, !tbaa !2
  %arrayidx2.43 = getelementptr inbounds i32, i32* %a, i64 44
  store i32 %.pre, i32* %arrayidx2.43, align 4, !tbaa !2
  %arrayidx2.44 = getelementptr inbounds i32, i32* %a, i64 45
  store i32 %.pre, i32* %arrayidx2.44, align 4, !tbaa !2
  %arrayidx2.45 = getelementptr inbounds i32, i32* %a, i64 46
  store i32 %.pre, i32* %arrayidx2.45, align 4, !tbaa !2
  %arrayidx2.46 = getelementptr inbounds i32, i32* %a, i64 47
  store i32 %.pre, i32* %arrayidx2.46, align 4, !tbaa !2
  %arrayidx2.47 = getelementptr inbounds i32, i32* %a, i64 48
  store i32 %.pre, i32* %arrayidx2.47, align 4, !tbaa !2
  %arrayidx2.48 = getelementptr inbounds i32, i32* %a, i64 49
  store i32 %.pre, i32* %arrayidx2.48, align 4, !tbaa !2
  %arrayidx2.49 = getelementptr inbounds i32, i32* %a, i64 50
  store i32 %.pre, i32* %arrayidx2.49, align 4, !tbaa !2
  %arrayidx2.50 = getelementptr inbounds i32, i32* %a, i64 51
  store i32 %.pre, i32* %arrayidx2.50, align 4, !tbaa !2
  %arrayidx2.51 = getelementptr inbounds i32, i32* %a, i64 52
  store i32 %.pre, i32* %arrayidx2.51, align 4, !tbaa !2
  %arrayidx2.52 = getelementptr inbounds i32, i32* %a, i64 53
  store i32 %.pre, i32* %arrayidx2.52, align 4, !tbaa !2
  %arrayidx2.53 = getelementptr inbounds i32, i32* %a, i64 54
  store i32 %.pre, i32* %arrayidx2.53, align 4, !tbaa !2
  %arrayidx2.54 = getelementptr inbounds i32, i32* %a, i64 55
  store i32 %.pre, i32* %arrayidx2.54, align 4, !tbaa !2
  %arrayidx2.55 = getelementptr inbounds i32, i32* %a, i64 56
  store i32 %.pre, i32* %arrayidx2.55, align 4, !tbaa !2
  %arrayidx2.56 = getelementptr inbounds i32, i32* %a, i64 57
  store i32 %.pre, i32* %arrayidx2.56, align 4, !tbaa !2
  %arrayidx2.57 = getelementptr inbounds i32, i32* %a, i64 58
  store i32 %.pre, i32* %arrayidx2.57, align 4, !tbaa !2
  %arrayidx2.58 = getelementptr inbounds i32, i32* %a, i64 59
  store i32 %.pre, i32* %arrayidx2.58, align 4, !tbaa !2
  %arrayidx2.59 = getelementptr inbounds i32, i32* %a, i64 60
  store i32 %.pre, i32* %arrayidx2.59, align 4, !tbaa !2
  %arrayidx2.60 = getelementptr inbounds i32, i32* %a, i64 61
  store i32 %.pre, i32* %arrayidx2.60, align 4, !tbaa !2
  %arrayidx2.61 = getelementptr inbounds i32, i32* %a, i64 62
  store i32 %.pre, i32* %arrayidx2.61, align 4, !tbaa !2
  %arrayidx2.62 = getelementptr inbounds i32, i32* %a, i64 63
  store i32 %.pre, i32* %arrayidx2.62, align 4, !tbaa !2
  %arrayidx2.63 = getelementptr inbounds i32, i32* %a, i64 64
  store i32 %.pre, i32* %arrayidx2.63, align 4, !tbaa !2
  %arrayidx2.64 = getelementptr inbounds i32, i32* %a, i64 65
  store i32 %.pre, i32* %arrayidx2.64, align 4, !tbaa !2
  %arrayidx2.65 = getelementptr inbounds i32, i32* %a, i64 66
  store i32 %.pre, i32* %arrayidx2.65, align 4, !tbaa !2
  %arrayidx2.66 = getelementptr inbounds i32, i32* %a, i64 67
  store i32 %.pre, i32* %arrayidx2.66, align 4, !tbaa !2
  %arrayidx2.67 = getelementptr inbounds i32, i32* %a, i64 68
  store i32 %.pre, i32* %arrayidx2.67, align 4, !tbaa !2
  %arrayidx2.68 = getelementptr inbounds i32, i32* %a, i64 69
  store i32 %.pre, i32* %arrayidx2.68, align 4, !tbaa !2
  %arrayidx2.69 = getelementptr inbounds i32, i32* %a, i64 70
  store i32 %.pre, i32* %arrayidx2.69, align 4, !tbaa !2
  %arrayidx2.70 = getelementptr inbounds i32, i32* %a, i64 71
  store i32 %.pre, i32* %arrayidx2.70, align 4, !tbaa !2
  %arrayidx2.71 = getelementptr inbounds i32, i32* %a, i64 72
  store i32 %.pre, i32* %arrayidx2.71, align 4, !tbaa !2
  %arrayidx2.72 = getelementptr inbounds i32, i32* %a, i64 73
  store i32 %.pre, i32* %arrayidx2.72, align 4, !tbaa !2
  %arrayidx2.73 = getelementptr inbounds i32, i32* %a, i64 74
  store i32 %.pre, i32* %arrayidx2.73, align 4, !tbaa !2
  %arrayidx2.74 = getelementptr inbounds i32, i32* %a, i64 75
  store i32 %.pre, i32* %arrayidx2.74, align 4, !tbaa !2
  %arrayidx2.75 = getelementptr inbounds i32, i32* %a, i64 76
  store i32 %.pre, i32* %arrayidx2.75, align 4, !tbaa !2
  %arrayidx2.76 = getelementptr inbounds i32, i32* %a, i64 77
  store i32 %.pre, i32* %arrayidx2.76, align 4, !tbaa !2
  %arrayidx2.77 = getelementptr inbounds i32, i32* %a, i64 78
  store i32 %.pre, i32* %arrayidx2.77, align 4, !tbaa !2
  %arrayidx2.78 = getelementptr inbounds i32, i32* %a, i64 79
  store i32 %.pre, i32* %arrayidx2.78, align 4, !tbaa !2
  %arrayidx2.79 = getelementptr inbounds i32, i32* %a, i64 80
  store i32 %.pre, i32* %arrayidx2.79, align 4, !tbaa !2
  %arrayidx2.80 = getelementptr inbounds i32, i32* %a, i64 81
  store i32 %.pre, i32* %arrayidx2.80, align 4, !tbaa !2
  %arrayidx2.81 = getelementptr inbounds i32, i32* %a, i64 82
  store i32 %.pre, i32* %arrayidx2.81, align 4, !tbaa !2
  %arrayidx2.82 = getelementptr inbounds i32, i32* %a, i64 83
  store i32 %.pre, i32* %arrayidx2.82, align 4, !tbaa !2
  %arrayidx2.83 = getelementptr inbounds i32, i32* %a, i64 84
  store i32 %.pre, i32* %arrayidx2.83, align 4, !tbaa !2
  %arrayidx2.84 = getelementptr inbounds i32, i32* %a, i64 85
  store i32 %.pre, i32* %arrayidx2.84, align 4, !tbaa !2
  %arrayidx2.85 = getelementptr inbounds i32, i32* %a, i64 86
  store i32 %.pre, i32* %arrayidx2.85, align 4, !tbaa !2
  %arrayidx2.86 = getelementptr inbounds i32, i32* %a, i64 87
  store i32 %.pre, i32* %arrayidx2.86, align 4, !tbaa !2
  %arrayidx2.87 = getelementptr inbounds i32, i32* %a, i64 88
  store i32 %.pre, i32* %arrayidx2.87, align 4, !tbaa !2
  %arrayidx2.88 = getelementptr inbounds i32, i32* %a, i64 89
  store i32 %.pre, i32* %arrayidx2.88, align 4, !tbaa !2
  %arrayidx2.89 = getelementptr inbounds i32, i32* %a, i64 90
  store i32 %.pre, i32* %arrayidx2.89, align 4, !tbaa !2
  %arrayidx2.90 = getelementptr inbounds i32, i32* %a, i64 91
  store i32 %.pre, i32* %arrayidx2.90, align 4, !tbaa !2
  %arrayidx2.91 = getelementptr inbounds i32, i32* %a, i64 92
  store i32 %.pre, i32* %arrayidx2.91, align 4, !tbaa !2
  %arrayidx2.92 = getelementptr inbounds i32, i32* %a, i64 93
  store i32 %.pre, i32* %arrayidx2.92, align 4, !tbaa !2
  %arrayidx2.93 = getelementptr inbounds i32, i32* %a, i64 94
  store i32 %.pre, i32* %arrayidx2.93, align 4, !tbaa !2
  %arrayidx2.94 = getelementptr inbounds i32, i32* %a, i64 95
  store i32 %.pre, i32* %arrayidx2.94, align 4, !tbaa !2
  %arrayidx2.95 = getelementptr inbounds i32, i32* %a, i64 96
  store i32 %.pre, i32* %arrayidx2.95, align 4, !tbaa !2
  %arrayidx2.96 = getelementptr inbounds i32, i32* %a, i64 97
  store i32 %.pre, i32* %arrayidx2.96, align 4, !tbaa !2
  %arrayidx2.97 = getelementptr inbounds i32, i32* %a, i64 98
  store i32 %.pre, i32* %arrayidx2.97, align 4, !tbaa !2
  %arrayidx2.98 = getelementptr inbounds i32, i32* %a, i64 99
  store i32 %.pre, i32* %arrayidx2.98, align 4, !tbaa !2
  %call = tail call i32 @_Z6helperiPi(i32 undef, i32* nonnull %a)
  %arrayidx3 = getelementptr inbounds i32, i32* %a, i64 99
  %0 = load i32, i32* %arrayidx3, align 4, !tbaa !2
  ret i32 %0
}

; Function Attrs: noinline uwtable
define dso_local void @_Z17_kernel_testbenchPi(i32* nocapture %a) local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %call = tail call i32 @_Z8randfunciPi(i32 undef, i32* nonnull %a)
  %arrayidx3 = getelementptr inbounds i32, i32* %a, i64 99
  %0 = load i32, i32* %arrayidx3, align 4, !tbaa !2
  %call4 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 %0)
  %call5 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %call4, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %1 = add nsw i64 %indvars.iv, -1
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %1
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %mul = shl nsw i32 %2, 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv.next
  store i32 %mul, i32* %arrayidx2, align 4, !tbaa !2
  %exitcond = icmp eq i64 %indvars.iv.next, 10
  br i1 %exitcond, label %for.cond.cleanup, label %for.body, !llvm.loop !6
}

declare dso_local dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) local_unnamed_addr #1

; Function Attrs: noinline uwtable
declare dso_local dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #0 align 2

; Function Attrs: noinline uwtable
declare dso_local dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #0

; Function Attrs: noinline norecurse uwtable
define dso_local i32 @main() local_unnamed_addr #6 {
entry:
  %a = alloca [100 x i32], align 16
  tail call void @srand(i32 7) #3
  %0 = bitcast [100 x i32]* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %0) #3
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %arraydecay = getelementptr inbounds [100 x i32], [100 x i32]* %a, i64 0, i64 0
  call void @_Z17_kernel_testbenchPi(i32* nonnull %arraydecay)
  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %0) #3
  ret i32 0

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %call = tail call i32 @rand() #3
  %rem = srem i32 %call, 100
  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %a, i64 0, i64 %indvars.iv
  store i32 %rem, i32* %arrayidx, align 4, !tbaa !2
  %call1 = tail call i32 @rand() #3
  %call5 = tail call i32 @rand() #3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 100
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
declare dso_local void @srand(i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare dso_local i32 @rand() local_unnamed_addr #2

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_testbench.cc() #0 section ".text.startup" {
entry:
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (trunk 330892) (llvm/trunk 330891)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
